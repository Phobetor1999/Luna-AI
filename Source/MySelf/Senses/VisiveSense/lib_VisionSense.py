import os
from typing         import Optional

import cv2
from AssetsLibs.Abstraction.lib_NeuralProcess                                     import NeuralProcess

class VisionSense(NeuralProcess):
            
    #- [CONSTRUCTOR]
    #--------------------------------------------------------------------------------------------------
    def __init__(self):
        """
        Initializes the VisionSense class.
        """
        super().__init__()
        
    def initialize(self):
        """
        Initializes the Vision sense and other components.
        Raises:
            Exception: If an error occurs during the initialization process.
        """
        try:
            self.__parseConfiguration()
        
            self.LOGGER.info("[VisionSense]::[initialize]")
            
            self.cap = cv2.VideoCapture(0)
            
            if not self.cap.isOpened():
                self.LOGGER.error("Errore nell'aprire la webcam.")
            else:
                self.LOGGER.info("Webcam aperta correttamente.")
            
            self.frame   = None
            self.running = True

            self.is_process_initialized = True
        except Exception as e:
            self.LOGGER.error("[VisionSense]::[initialize] => Error during initialization: %s", e, exc_info=True)
            self.is_process_initialized = False

    async def elaboration(self):
        """
        Main elaboration logic for NeuralProcess.
        """
        try:
            self.LOGGER.info("Starting the vision neural process elaboration.")
            self._am_i_active = True

            # Step 1: Process Inputs
            _ = await self.processInputs()

            # Step 2: Execute Inference
            _ = await self.execute_inference()

            # Step 3: Handle Outputs
            _ = await self.handle_outputs()

            self.LOGGER.info("the Vision Neural process elaboration has been completed.")
        except Exception as e:
            self.LOGGER.error(f"Error during neural process elaboration: {e}")
            raise e

    #- [CONCRETIZATION OF ABSTRACT METHODS SPECIFIC TO THIS CLASS]
    #--------------------------------------------------------------------------------------------------
    async def processInputs(self):
        """
        Processes input data and prepares it for neural network inference.
        """

        self.LOGGER.info("[VisionSense]::[processInputs] => ")
        return None

    async def execute_inference(self):
        """
        Executes the neural network inference using the processed inputs.
        This method must be implemented by the subclasses.
        """
        print("execute_inference")        
        pass

    async def handle_outputs(self):
        """
        Handles the output data generated by the neural network inference.
        This method must be implemented by the subclasses.
        """
        print("handle_outputs")           
        pass

    def __parseConfiguration(self):
        """
        Parses the configuration from the 'config.yaml' file and sets the corresponding attributes.
        This method reads various configuration parameters related to 
        """

    def getFrame(self):
        """Acquisisce e restituisce il prossimo fotogramma dalla webcam"""
        if self.cap.isOpened() and self.running:
            ret, frame = self.cap.read()
            if ret:
                # Elaborazione del fotogramma (se necessaria)
                # Converti il frame da BGR a RGB
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                self.frame = frame_rgb
                return self.frame
            else:
                self.LOGGER.error("Errore nel leggere il fotogramma dalla webcam.")
        return None

    def sleep(self):
        self.am_i_active = False
    def stop(self):
        """Ferma l'acquisizione della webcam"""
        self.running = False
        self.cap.release()        