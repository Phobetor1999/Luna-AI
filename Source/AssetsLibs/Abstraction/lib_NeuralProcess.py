from abc import abstractmethod
import os

from AssetsLibs.Abstraction.lib_BasicProcess import BasicProcess

class NeuralProcess(BasicProcess):
    """
    NeuralProcess extends BasicProcess to provide additional functionalities
    for simulating neural processes, including human-like senses.
    """

    #- [PRIVATE OBJECTS]
    #--------------------------------------------------------------------------------------------------
    _neural_network_model: object    = None  # Placeholder for a neural network model
    _input_data: dict                = None  # Input data for the neural process
    _output_data: dict               = None  # Output data generated by the neural process
    _external_stimuli_directory: str = None  # Directory path containing external stimuli data
    _am_i_active:bool                = False #

    #- [PROPERTIES]
    #--------------------------------------------------------------------------------------------------
    @property
    def neural_model(self):
        """
        Returns the neural network model instance.
        """
        return self._neural_network_model

    @neural_model.setter
    def neural_model(self, model):
        """
        Sets the neural network model instance.
        """
        self._neural_network_model = model

    @property
    def input_data(self):
        """
        Returns the input data for the neural process.
        """
        return self._input_data

    @input_data.setter
    def input_data(self, data: dict):
        """
        Sets the input data for the neural process.
        """
        self._input_data = data

    @property
    def output_data(self):
        """
        Returns the output data generated by the neural process.
        """
        return self._output_data

    @property
    def external_stimuli_directory(self):
        """
        Returns the main directory containing the external stimuli data.
        """
        return self._external_stimuli_directory
    
    @external_stimuli_directory.setter
    def external_stimuli_directory(self, value):
        """
        Sets the main directory containing the external stimuli data.
        """
        self._external_stimuli_directory = value
    
    @property
    def am_i_active(self):
        """
        This flag indicates if the neural process is active.
        """
        return self._am_i_active
    @am_i_active.setter
    def am_i_active(self, value):
        """
        Args:
            value (bool): The active status to be set.
        """
        self._am_i_active = value
    
    #- [CONSTRUCTOR]
    #--------------------------------------------------------------------------------------------------
    def __init__(self):
        """
        Initializes the NeuralProcess.
        """
        super().__init__()
        self.external_stimuli_directory    = os.path.join(self._project_root, "MySelf\\Senses\\_ExternalStimuli\\")

    #- [ABSTRACT METHODS]
    #--------------------------------------------------------------------------------------------------
    @abstractmethod
    async def processInputs(self):
        """
        Processes input data and prepares it for neural network inference.
        This method must be implemented by the subclasses.
        """
        pass

    @abstractmethod
    async def execute_inference(self):
        """
        Executes the neural network inference using the processed inputs.
        This method must be implemented by the subclasses.
        """
        pass

    @abstractmethod
    async def handle_outputs(self):
        """
        Handles the output data generated by the neural network inference.
        This method must be implemented by the subclasses.
        """
        pass

    @abstractmethod
    async def elaboration(self):
        """
        """
        pass
    
    async def wakeUp(self):
        _ = await self._run()

    def sleep(self):
        self.am_i_active = False
        pass