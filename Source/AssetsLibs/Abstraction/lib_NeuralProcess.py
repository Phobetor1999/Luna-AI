from abc import abstractmethod
import os

from AssetsLibs.Abstraction.lib_BasicProcess import BasicProcess

class NeuralProcess(BasicProcess):
    """
    NeuralProcess extends BasicProcess to provide additional functionalities
    for simulating neural processes, including human-like senses.
    """

    #- [PRIVATE OBJECTS]
    #--------------------------------------------------------------------------------------------------
    _neural_network_model: object    = None  # Placeholder for a neural network model
    _input_data: dict                = None  # Input data for the neural process
    _output_data: dict               = None  # Output data generated by the neural process
    _external_stimuli_directory: str = None  # Directory path containing external stimuli data
    _am_i_active:bool                = False #

    #- [PROPERTIES]
    #--------------------------------------------------------------------------------------------------
    @property
    def neural_model(self):
        """
        Returns the neural network model instance.
        """
        return self._neural_network_model

    @neural_model.setter
    def neural_model(self, model):
        """
        Sets the neural network model instance.
        """
        self._neural_network_model = model

    @property
    def input_data(self):
        """
        Returns the input data for the neural process.
        """
        return self._input_data

    @input_data.setter
    def input_data(self, data: dict):
        """
        Sets the input data for the neural process.
        """
        self._input_data = data

    @property
    def output_data(self):
        """
        Returns the output data generated by the neural process.
        """
        return self._output_data

    @property
    def external_stimuli_directory(self):
        """
        Returns the main directory containing the external stimuli data.
        """
        return self._external_stimuli_directory
    
    @external_stimuli_directory.setter
    def external_stimuli_directory(self, value):
        """
        Sets the main directory containing the external stimuli data.
        """
        self._external_stimuli_directory = value
    
    @property
    def am_i_active(self):
        """
        This flag indicates if the neural process is active.
        """
        return self._am_i_active
    @am_i_active.setter
    def am_i_active(self, value):
        """
        Args:
            value (bool): The active status to be set.
        """
        self._am_i_active = value
    
    #- [CONSTRUCTOR]
    #--------------------------------------------------------------------------------------------------
    def __init__(self):
        """
        Initializes the NeuralProcess.
        """
        super().__init__()
        self.external_stimuli_directory    = os.path.join(self.project_root, "MySelf\\Senses\\_ExternalStimuli\\")

    #- [ABSTRACT METHODS]
    #--------------------------------------------------------------------------------------------------
    @abstractmethod
    async def processInputs(self):
        """
        Processes input data and prepares it for neural network inference.
        This method must be implemented by the subclasses.
        """
        raise NotImplementedError("[%s] Must implement the 'processInputs' method.", self.class_name)

    @abstractmethod
    async def execute_inference(self):
        """
        Executes the neural network inference using the processed inputs.
        This method must be implemented by the subclasses.
        """
        raise NotImplementedError("[%s] Must implement the 'execute_inference' method.", self.class_name)

    @abstractmethod
    async def handle_outputs(self):
        """
        Handles the output data generated by the neural network inference.
        This method must be implemented by the subclasses.
        """
        raise NotImplementedError("[%s] Must implement the 'handle_outputs' method.", self.class_name)

    @abstractmethod
    async def initialize(self):
        """
        [Abstract Method - It must be implemented by concrete classes.]\n
        Initializes the Neural Process.
        This method is used to assign configuration values, specific to the 
        Process being executed, and to instantiate components required for 
        its operations.
        The Shadow call is done by constructor.
        """
        raise NotImplementedError("[%s] Must implement the 'initialize' method.", self.class_name)

    @abstractmethod
    async def elaboration(self):
        """
        [Abstract Method - It must be implemented by concrete classes.]\n
        Abstract Method to define the main elaboration logic for the concrete process.
        """
        raise NotImplementedError("[%s] Must implement the 'elaboration' method.", self.class_name)
    
    #- [EXPOSED METHODS]
    #--------------------------------------------------------------------------------------------------    
    async def wakeUp(self):
        """
        Asynchronously wakes up the neural process by running the internal _run method.

        This method is a coroutine and should be awaited. It calls the _run method from the
        BasicProcess that in turn calls the abstract elaboration method from Neural Process
        and waits for its completion.

        Returns:
            The result of the _run method.
        """
        _ = await self._run()

    def sleep(self):
        self.am_i_active = False
        pass